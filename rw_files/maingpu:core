ARG RELEASE
ARG LAUNCHPAD_BUILD_ARCH
LABEL org.opencontainers.image.ref.name=ubuntu
LABEL org.opencontainers.image.version=22.04
ADD file:63d5ab3ef0aab308c0e71cb67292c5467f60deafa9b0418cbb220affcd078444 in /
CMD ["/bin/bash"]
ENV NVARCH=x86_64 0B buildkit.dockerfile.v0
ENV NVIDIA_REQUIRE_CUDA=cuda>=12.2 brand=tesla,driver>=470,driver<471 brand=unknown,driver>=470,driver<471 brand=nvidia,driver>=470,driver<471 brand=nvidiartx,driver>=470,driver<471 brand=geforce,driver>=470,driver<471 brand=geforcertx,driver>=470,driver<471 brand=quadro,driver>=470,driver<471 brand=quadrortx,driver>=470,driver<471 brand=titan,driver>=470,driver<471 brand=titanrtx,driver>=470,driver<471 brand=tesla,driver>=525,driver<526 brand=unknown,driver>=525,driver<526 brand=nvidia,driver>=525,driver<526 brand=nvidiartx,driver>=525,driver<526 brand=geforce,driver>=525,driver<526 brand=geforcertx,driver>=525,driver<526 brand=quadro,driver>=525,driver<526 brand=quadrortx,driver>=525,driver<526 brand=titan,driver>=525,driver<526 brand=titanrtx,driver>=525,driver<526 0B buildkit.dockerfile.v0
ENV NV_CUDA_CUDART_VERSION=12.2.140-1 0B buildkit.dockerfile.v0
ENV NV_CUDA_COMPAT_PACKAGE=cuda-compat-12-2 0B buildkit.dockerfile.v0
ARG TARGETARCH 0B buildkit.dockerfile.v0
LABEL maintainer=NVIDIA CORPORATION <cudatools@nvidia.com> 0B buildkit.dockerfile.v0
RUN |1 TARGETARCH=amd64 /bin/sh -c apt-get update \
   &&  apt-get install -y --no-install-recommends gnupg2 curl ca-certificates \
   &&  curl -fsSLO https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/${NVARCH}/cuda-keyring_1.0-1_all.deb \
   &&  dpkg -i cuda-keyring_1.0-1_all.deb \
   &&  apt-get purge --autoremove -y curl \
   &&  rm -rf /var/lib/apt/lists/* # buildkit 10.6MB buildkit.dockerfile.v0
ENV CUDA_VERSION=12.2.2 0B buildkit.dockerfile.v0
RUN |1 TARGETARCH=amd64 /bin/sh -c apt-get update \
   &&  apt-get install -y --no-install-recommends cuda-cudart-12-2=${NV_CUDA_CUDART_VERSION} ${NV_CUDA_COMPAT_PACKAGE} \
   &&  rm -rf /var/lib/apt/lists/* # buildkit 150MB buildkit.dockerfile.v0
RUN |1 TARGETARCH=amd64 /bin/sh -c echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf \
   &&  echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf # buildkit 46B buildkit.dockerfile.v0
ENV PATH=/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin 0B buildkit.dockerfile.v0
ENV LD_LIBRARY_PATH=/usr/local/nvidia/lib:/usr/local/nvidia/lib64 0B buildkit.dockerfile.v0
COPY NGC-DL-CONTAINER-LICENSE / # buildkit 17.3kB buildkit.dockerfile.v0
ENV NVIDIA_VISIBLE_DEVICES=all 0B buildkit.dockerfile.v0
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility 0B buildkit.dockerfile.v0
ENV NV_CUDA_LIB_VERSION=12.2.2-1 0B buildkit.dockerfile.v0
ENV NV_NVTX_VERSION=12.2.140-1 0B buildkit.dockerfile.v0
ENV NV_LIBNPP_VERSION=12.2.1.4-1 0B buildkit.dockerfile.v0
ENV NV_LIBNPP_PACKAGE=libnpp-12-2=12.2.1.4-1 0B buildkit.dockerfile.v0
ENV NV_LIBCUSPARSE_VERSION=12.1.2.141-1 0B buildkit.dockerfile.v0
ENV NV_LIBCUBLAS_PACKAGE_NAME=libcublas-12-2 0B buildkit.dockerfile.v0
ENV NV_LIBCUBLAS_VERSION=12.2.5.6-1 0B buildkit.dockerfile.v0
ENV NV_LIBCUBLAS_PACKAGE=libcublas-12-2=12.2.5.6-1 0B buildkit.dockerfile.v0
ENV NV_LIBNCCL_PACKAGE_NAME=libnccl2 0B buildkit.dockerfile.v0
ENV NV_LIBNCCL_PACKAGE_VERSION=2.19.3-1 0B buildkit.dockerfile.v0
ENV NCCL_VERSION=2.19.3-1 0B buildkit.dockerfile.v0
ENV NV_LIBNCCL_PACKAGE=libnccl2=2.19.3-1+cuda12.2 0B buildkit.dockerfile.v0
ARG TARGETARCH 0B buildkit.dockerfile.v0
LABEL maintainer=NVIDIA CORPORATION <cudatools@nvidia.com> 0B buildkit.dockerfile.v0
RUN |1 TARGETARCH=amd64 /bin/sh -c apt-get update \
   &&  apt-get install -y --no-install-recommends cuda-libraries-12-2=${NV_CUDA_LIB_VERSION} ${NV_LIBNPP_PACKAGE} cuda-nvtx-12-2=${NV_NVTX_VERSION} libcusparse-12-2=${NV_LIBCUSPARSE_VERSION} ${NV_LIBCUBLAS_PACKAGE} ${NV_LIBNCCL_PACKAGE} \
   &&  rm -rf /var/lib/apt/lists/* # buildkit 1.95GB buildkit.dockerfile.v0
RUN |1 TARGETARCH=amd64 /bin/sh -c apt-mark hold ${NV_LIBCUBLAS_PACKAGE_NAME} ${NV_LIBNCCL_PACKAGE_NAME} # buildkit 261kB buildkit.dockerfile.v0
COPY entrypoint.d/ /opt/nvidia/entrypoint.d/ # buildkit 3.06kB buildkit.dockerfile.v0
COPY nvidia_entrypoint.sh /opt/nvidia/ # buildkit 2.53kB buildkit.dockerfile.v0
ENV NVIDIA_PRODUCT_NAME=CUDA 0B buildkit.dockerfile.v0
ENTRYPOINT ["/opt/nvidia/nvidia_entrypoint.sh"] 0B buildkit.dockerfile.v0
RUN apt-get update \
   &&  apt-get install -y --no-install-recommends python3 python3-pip python3.10-venv \
   &&  rm -rf /var/lib/apt/lists/*
RUN apt-get update \
   &&  apt-get install -y apt-transport-https ca-certificates gnupg curl gcc g++
RUN apt-get install -y git
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | tee -a /etc/apt/sources.list.d/google-cloud-sdk.list \
   &&  curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg \
   &&  apt-get update -y \
   &&  apt-get install google-cloud-cli -y
RUN apt-get install -y jq screen ca-certificates
RUN mkdir -p /root
WORKDIR /root
COPY file:29571ccee8ed9a1e28dfebdedcb369249e3eaa83cd69c890b8dfe63172a6f6ec in README.md
COPY file:b20360ce4c6370c4fbee5e2ea8cd2c11e1ee6700596bfe21e2ee050524cbaed2 in pyproject.toml
RUN mkdir axlearn \
   &&  touch axlearn/__init__.py
ENV VIRTUAL_ENV=/opt/venv
RUN python3 -m venv $VIRTUAL_ENV
ENV PATH=/opt/venv/bin:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
RUN pip install flit
RUN pip install --upgrade pip
ENV RUN_PYTHON_SDK_IN_DEFAULT_ENVIRONMENT=1
RUN pip install .[gcp,dataflow,gpu,dev]
COPY dir:a775c300ecdc4e936d66767c3ffbdc31c02190fac06000c3a67be7963938af44 in .
COPY dir:a775c300ecdc4e936d66767c3ffbdc31c02190fac06000c3a67be7963938af44 in /pipeline
COPY dir:10e5e546adab85839aca611c3d1155473c89726613066f6f530e93d80839c663 in /opt/apache/beam
ENTRYPOINT ["/opt/apache/beam/boot"]
